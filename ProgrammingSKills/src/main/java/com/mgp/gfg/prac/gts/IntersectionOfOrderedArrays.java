package com.mgp.gfg.prac.gts;

import java.util.*;

public class IntersectionOfOrderedArrays {
    public static void main(String[] args) {
        int arr1[] = {56, 64, 74, 112, 113, 150, 168, 184, 190, 193, 232, 234, 270, 276, 300, 302, 318, 343, 351, 361, 490, 501, 510, 524, 570, 599, 610, 626, 641, 653, 660, 673, 694, 748, 779, 790, 812, 853, 869, 874, 874, 887, 937, 958, 965, 965, 983, 1033, 1044, 1061, 1067, 1088, 1138, 1148, 1162, 1193, 1202, 1234, 1238, 1239, 1242, 1254, 1263, 1317, 1317, 1325, 1342, 1343, 1368, 1368, 1389, 1403, 1408, 1451, 1456, 1461, 1464, 1537, 1539, 1565, 1635, 1649, 1663, 1686, 1703, 1704, 1742, 1765, 1768, 1768, 1771, 1826, 1828, 1886, 1896, 1918, 1936, 1979, 1984, 1997, 2040, 2057, 2074, 2079, 2089, 2131, 2152, 2197, 2261, 2289, 2332, 2349, 2362, 2399, 2419, 2452, 2482, 2531, 2550, 2562, 2585, 2618, 2624, 2668, 2671, 2717, 2739, 2767, 2772, 2813, 2841, 2849, 2856, 2861, 2906, 2915, 2954, 2971, 2974, 2984, 3006, 3029, 3066, 3086, 3094, 3107, 3120, 3129, 3168, 3179, 3250, 3252, 3267, 3275, 3286, 3324, 3334, 3365, 3400, 3436, 3470, 3505, 3513, 3524, 3524, 3544, 3683, 3685, 3724, 3746, 3754, 3771, 3802, 3803, 3806, 3839, 3877, 3959, 3963, 4000, 4002, 4057, 4058, 4061, 4075, 4144, 4145, 4151, 4180, 4217, 4245, 4248, 4297, 4473, 4552, 4558, 4617, 4631, 4639, 4675, 4676, 4731, 4731, 4756, 4771, 4783, 4819, 4823, 4854, 4858, 4859, 4866, 4889, 4890, 4920, 4927, 4983, 4991, 4991, 5000, 5004, 5077, 5089, 5126, 5129, 5139, 5147, 5203, 5237, 5248, 5261, 5283, 5298, 5302, 5361, 5364, 5368, 5374, 5386, 5397, 5412, 5473, 5479, 5506, 5507, 5517, 5523, 5694, 5710, 5724, 5729, 5763, 5795, 5831, 5832, 5849, 5860, 5873, 5892, 5930, 5944, 5972, 6056, 6063, 6086, 6100, 6110, 6139, 6142, 6149, 6153, 6156, 6171, 6171, 6223, 6243, 6252, 6254, 6308, 6318, 6326, 6366, 6375, 6382, 6402, 6417, 6440, 6493, 6508, 6530, 6532, 6564, 6593, 6598, 6631, 6644, 6668, 6671, 6671, 6672, 6700, 6702, 6723, 6830, 6875, 6922, 6936, 6952, 6956, 6956, 6959, 6994, 7016, 7074, 7079, 7098, 7126, 7128, 7190, 7196, 7223, 7267, 7277, 7302, 7362, 7398, 7448, 7572, 7576, 7595, 7622, 7641, 7685, 7706, 7709, 7727, 7756, 7760, 7782, 7783, 7788, 7804, 7819, 7821, 7821, 7841, 7842, 7895, 7908, 7909, 7957, 7984, 7998, 8035, 8077, 8105, 8120, 8161, 8167, 8204, 8206, 8209, 8214, 8299, 8299, 8321, 8323, 8370, 8380, 8399, 8416, 8437, 8484, 8495, 8508, 8518, 8594, 8607, 8652, 8686, 8699, 8725, 8763, 8812, 8831, 8903, 8933, 8968, 8975, 9038, 9079, 9088, 9104, 9109, 9112, 9116, 9119, 9120, 9139, 9143, 9180, 9195, 9200, 9219, 9220, 9224, 9248, 9250, 9295, 9298, 9309, 9319, 9320, 9323, 9335, 9346, 9363, 9372, 9373, 9389, 9397, 9403, 9431, 9444, 9448, 9502, 9509, 9511, 9514, 9526, 9530, 9532, 9567, 9616, 9629, 9647, 9703, 9729, 9767, 9791, 9844, 9877, 9885, 9934, 9944, 9967, 9984, 9993, 10025, 10026, 10052, 10063, 10068, 10089, 10146, 10164, 10166, 10175, 10221, 10267, 10289, 10290, 10291, 10347, 10347, 10363, 10363, 10388, 10401, 10427, 10437, 10453, 10536, 10652, 10655, 10667, 10692, 10703, 10762, 10825, 10833, 10838, 10852, 10856, 10911, 10945, 11014, 11026, 11069, 11078, 11099, 11125, 11128, 11142, 11152, 11176, 11181, 11204, 11209, 11220, 11268, 11289, 11324, 11381, 11448, 11491, 11521, 11636, 11644, 11645, 11655, 11655, 11695, 11699, 11709, 11710, 11715, 11730, 11735, 11759, 11770, 11804, 11809, 11848, 11849, 11860, 11893, 11902, 11926, 11960, 11963, 11965, 11974, 12014, 12018, 12052, 12071, 12075, 12103, 12113, 12128, 12155, 12163, 12200, 12214, 12215, 12238, 12249, 12269, 12278, 12308, 12327, 12335, 12351, 12400, 12418, 12419, 12429, 12479, 12483, 12520, 12534, 12552, 12556, 12570, 12582, 12628, 12724, 12729, 12783, 12796, 12802, 12815, 12841, 12856, 12859, 12860, 12863, 12889, 12931, 12943, 13031, 13038, 13041, 13071, 13140, 13149, 13171, 13284, 13304, 13325, 13369, 13370, 13393, 13412, 13434, 13443, 13445, 13445, 13480, 13481, 13560, 13620, 13627, 13640, 13640, 13645, 13650, 13653, 13669, 13670, 13743, 13789, 13835, 13850, 13857, 13921, 13941, 13976, 13995, 14024, 14026, 14041, 14047, 14056, 14067, 14080, 14093, 14102, 14105, 14121, 14133, 14144, 14196, 14235, 14293, 14339, 14359, 14386, 14394, 14412, 14488, 14489, 14490, 14537, 14553, 14598, 14616, 14626, 14638, 14649, 14691, 14711, 14729, 14743, 14774, 14822, 14883, 14887, 14911, 14957, 14959, 14964, 15052, 15065, 15093, 15105, 15116, 15133, 15142, 15149, 15151, 15176, 15230, 15230, 15258, 15265, 15333, 15344, 15397, 15413, 15437, 15447, 15466, 15472, 15485, 15520, 15527, 15586, 15599, 15614, 15622, 15700, 15705, 15725, 15845, 15852, 15894, 15962, 15991, 15993, 16022, 16027, 16049, 16051, 16074, 16078, 16225, 16238, 16256, 16342, 16357, 16363, 16373, 16392, 16403, 16441, 16484, 16489, 16519, 16526, 16532, 16535, 16555, 16565, 16565, 16622, 16623, 16672, 16684, 16709, 16716, 16783, 16811, 16822, 16830, 16897, 16925, 16944, 16966, 16970, 16977, 16993, 17006, 17009, 17010, 17070, 17090, 17096, 17110, 17131, 17163, 17203, 17218, 17316, 17324, 17338, 17358, 17510, 17526, 17530, 17551, 17634, 17726, 17735, 17753, 17806, 17807, 17826, 17839, 17844, 17860, 17882, 17915, 17921, 17963, 17963, 17970, 18006, 18082, 18091, 18186, 18204, 18261, 18265, 18300, 18319, 18320, 18362, 18385, 18413, 18422, 18462, 18466, 18477, 18497, 18505, 18512, 18519, 18528, 18590, 18592, 18603, 18635, 18647, 18652, 18725, 18738, 18740, 18788, 18798, 18805, 18812, 18816, 18816, 18891, 18905, 19022, 19026, 19027, 19039, 19051, 19088, 19100, 19156, 19205, 19246, 19275, 19283, 19368, 19443, 19444, 19445, 19451, 19520, 19537, 19565, 19574, 19590, 19619, 19636, 19641, 19658, 19675, 19677, 19685, 19714, 19796, 19814, 19819, 19831, 19858, 19933, 19970, 20006, 20018, 20075, 20108, 20109, 20117, 20157, 20178, 20193, 20212, 20226, 20233, 20234, 20245, 20291, 20292, 20309, 20405, 20410, 20433, 20461, 20477, 20511, 20523, 20564, 20574, 20619, 20660, 20693, 20697, 20778, 20880, 20907, 20936, 20959, 20962, 21037, 21062, 21078, 21082, 21098, 21113, 21151, 21163, 21174, 21177, 21217, 21217, 21242, 21250, 21302, 21337, 21347, 21392, 21429, 21432, 21494, 21497, 21497, 21510, 21533, 21549, 21600, 21605, 21614, 21656, 21683, 21697, 21712, 21794, 21824, 21853, 21853, 21853, 21869, 21876, 21878, 21903, 21923, 21931, 21980, 21981, 22000, 22001, 22015, 22034, 22056, 22061, 22069, 22081, 22083, 22094, 22096, 22107, 22156, 22167, 22182, 22183, 22194, 22227, 22233, 22305, 22341, 22345, 22469, 22473, 22510, 22521, 22590, 22601, 22636, 22640, 22683, 22697, 22713, 22753, 22781, 22802, 22943, 22951, 23053, 23086, 23091, 23092, 23119, 23137, 23149, 23155, 23158, 23186, 23187, 23300, 23320, 23357, 23413, 23450, 23451, 23453, 23456, 23461, 23464, 23493, 23510, 23544, 23575, 23584, 23659, 23663, 23687, 23694, 23781, 23806, 23808, 23848, 23848, 23848, 23858, 23909, 23911, 23912, 23935, 23972, 24064, 24068, 24081, 24096, 24146, 24146, 24152, 24175, 24184, 24200, 24216, 24228, 24234, 24236, 24252, 24293, 24294, 24371, 24372, 24478, 24485, 24488, 24497, 24497, 24513, 24526, 24529, 24548, 24556, 24564, 24638, 24653, 24667, 24673, 24719, 24755, 24758, 24760, 24763, 24792, 24798, 24821, 24832, 24966, 24978, 24978, 24993, 25007, 25059, 25082, 25091, 25098, 25120, 25122, 25129, 25171, 25184, 25220, 25235, 25244, 25261, 25290, 25307, 25308, 25315, 25316, 25319, 25329, 25377, 25385, 25393, 25406, 25427, 25449, 25456, 25470, 25471, 25479, 25524, 25568, 25583, 25583, 25593, 25666, 25718, 25731, 25762, 25793, 25809, 25834, 25834, 25852, 25894, 25904, 25904, 25911, 25915, 25941, 25952, 25970, 26001, 26013, 26014, 26030, 26034, 26051, 26080, 26102, 26169, 26183, 26191, 26218, 26238, 26245, 26314, 26359, 26361, 26383, 26402, 26407, 26431, 26445, 26476, 26527, 26529, 26556, 26565, 26593, 26608, 26617, 26703, 26727, 26787, 26804, 26854, 26856, 26875, 26883, 26971, 26982, 26987, 27003, 27027, 27054, 27083, 27102, 27201, 27206, 27218, 27250, 27264, 27278, 27286, 27291, 27302, 27319, 27337, 27394, 27475, 27493, 27499, 27526, 27544, 27610, 27610, 27614, 27632, 27646, 27706, 27731, 27739, 27761, 27767, 27769, 27796, 27810, 27815, 27826, 27840, 27863, 27886, 27892, 27902, 28035, 28044, 28060, 28077, 28118, 28144, 28150, 28162, 28241, 28242, 28268, 28340, 28343, 28364, 28382, 28442, 28464, 28492, 28558, 28563, 28581, 28621, 28639, 28650, 28680, 28729, 28729, 28883, 28883, 28889, 28909, 28963, 28964, 29039, 29061, 29110, 29115, 29125, 29157, 29195, 29203, 29214, 29294, 29339, 29343, 29347, 29410, 29473, 29489, 29489, 29492, 29572, 29623, 29647, 29655, 29662, 29668, 29668, 29701, 29702, 29719, 29720, 29754, 29760, 29811, 29877, 29878, 29886, 29896, 29907, 29930, 29935, 29944, 29987, 29997, 29998, 30007, 30011, 30039, 30048, 30058, 30098, 30100, 30102, 30184, 30235, 30257, 30290, 30329, 30345, 30351, 30359, 30390, 30420, 30430, 30435, 30451, 30497, 30504, 30556, 30572, 30608, 30626, 30637, 30649, 30695, 30697, 30701, 30744, 30764, 30776, 30779, 30831, 30847, 30878, 30886, 30908, 30919, 30969, 30970, 30974, 30975, 30976, 30996, 31114, 31117, 31129, 31133, 31164, 31165, 31237, 31245, 31249, 31261, 31278, 31304, 31309, 31315, 31330, 31339, 31369, 31385, 31386, 31425, 31467, 31471, 31492, 31561, 31636, 31639, 31658, 31714, 31720, 31720, 31727, 31730, 31863, 31869, 31880, 31910, 31923, 31940, 31998, 32008, 32011, 32012, 32013, 32062, 32064, 32069, 32089, 32104, 32208, 32245, 32269, 32281, 32295, 32300, 32300, 32364, 32367, 32389, 32400, 32412, 32454, 32473, 32502, 32527, 32528, 32535, 32610, 32613, 32620, 32651, 32662, 32668, 32697, 32736, 32741, 32766};
        int arr2[] = {71, 98, 204, 242, 258, 278, 418, 558, 696, 704, 754, 829, 998, 1064, 1089, 1104, 1187, 1190, 1210, 1262, 1269, 1358, 1361, 1396, 1431, 1498, 1568, 1680, 1798, 1801, 1899, 1975, 1983, 1994, 2000, 2009, 2016, 2056, 2087, 2102, 2171, 2184, 2194, 2313, 2335, 2432, 2457, 2545, 2653, 2840, 2902, 2937, 3029, 3034, 3038, 3152, 3170, 3226, 3293, 3348, 3390, 3441, 3465, 3496, 3516, 3549, 3674, 3685, 3804, 3811, 3824, 3877, 3932, 3941, 4007, 4048, 4059, 4074, 4328, 4539, 4644, 4677, 4687, 4699, 4709, 4744, 4781, 4819, 4831, 4863, 4911, 4976, 4997, 5055, 5061, 5135, 5171, 5176, 5177, 5183, 5195, 5355, 5374, 5403, 5406, 5449, 5459, 5515, 5516, 5552, 5556, 5620, 5665, 5795, 5834, 5837, 5847, 5859, 5865, 5919, 5950, 5985, 6000, 6004, 6032, 6048, 6065, 6082, 6124, 6149, 6181, 6185, 6192, 6199, 6203, 6282, 6355, 6404, 6465, 6512, 6524, 6587, 6735, 6818, 6962, 6989, 7021, 7101, 7128, 7197, 7216, 7302, 7307, 7318, 7399, 7491, 7510, 7594, 7612, 7654, 7677, 7776, 7816, 7824, 7848, 7866, 7888, 7916, 7917, 7919, 7944, 7954, 8007, 8336, 8345, 8408, 8438, 8670, 8711, 8772, 8808, 8818, 8860, 8903, 8982, 9022, 9061, 9127, 9133, 9204, 9238, 9437, 9489, 9614, 9669, 9696, 9715, 9744, 9757, 9761, 9891, 9918, 9920, 9944, 9950, 9957, 9973, 9988, 9997, 10061, 10071, 10072, 10073, 10126, 10153, 10227, 10337, 10337, 10433, 10457, 10535, 10582, 10601, 10621, 10701, 10743, 10746, 10749, 10817, 10914, 10934, 10979, 11064, 11114, 11127, 11144, 11185, 11485, 11500, 11550, 11629, 11682, 11727, 11747, 11778, 11818, 11988, 12012, 12063, 12091, 12119, 12178, 12309, 12378, 12379, 12382, 12394, 12397, 12448, 12479, 12496, 12534, 12587, 12697, 12734, 12780, 12783, 12821, 12843, 12850, 12874, 12887, 13031, 13044, 13086, 13110, 13141, 13234, 13270, 13388, 13436, 13447, 13463, 13511, 13529, 13554, 13762, 13853, 13875, 14052, 14132, 14197, 14253, 14275, 14304, 14314, 14328, 14477, 14555, 14560, 14620, 14708, 14743, 14775, 14784, 14811, 14888, 14941, 14950, 14951, 14968, 14993, 14995, 15004, 15004, 15037, 15095, 15109, 15144, 15262, 15319, 15350, 15351, 15373, 15377, 15511, 15544, 15551, 15604, 15713, 15773, 15841, 15869, 15895, 15940, 16038, 16052, 16056, 16134, 16155, 16404, 16418, 16628, 16691, 16791, 16791, 16792, 16819, 16831, 16861, 16867, 16940, 17026, 17073, 17077, 17176, 17230, 17266, 17291, 17397, 17469, 17481, 17559, 17635, 17753, 17798, 17843, 17849, 17902, 18051, 18126, 18148, 18229, 18290, 18296, 18303, 18332, 18484, 18495, 18517, 18517, 18539, 18562, 18674, 18690, 18692, 18803, 18846, 18949, 18962, 18989, 18992, 19057, 19067, 19165, 19169, 19270, 19304, 19306, 19312, 19398, 19426, 19479, 19575, 19593, 19647, 19679, 19728, 19742, 19754, 19789, 19832, 19869, 19871, 19895, 20019, 20064, 20096, 20145, 20156, 20168, 20356, 20367, 20412, 20517, 20544, 20634, 20742, 20797, 20809, 20820, 20865, 20951, 21075, 21126, 21180, 21271, 21278, 21311, 21370, 21440, 21461, 21477, 21595, 21600, 21601, 21619, 21700, 21782, 21791, 21878, 21892, 21897, 21905, 22087, 22105, 22166, 22281, 22410, 22424, 22461, 22507, 22513, 22552, 22614, 22673, 22738, 22804, 22903, 23018, 23060, 23071, 23075, 23092, 23109, 23120, 23214, 23307, 23390, 23476, 23590, 23596, 23619, 23663, 23664, 23923, 23944, 24022, 24077, 24083, 24152, 24174, 24196, 24199, 24282, 24284, 24305, 24325, 24432, 24459, 24505, 24592, 24623, 24694, 24754, 24795, 24858, 24877, 25058, 25093, 25116, 25158, 25238, 25305, 25364, 25399, 25508, 25519, 25623, 25634, 25709, 25816, 25956, 25987, 26050, 26104, 26109, 26155, 26280, 26360, 26366, 26375, 26397, 26423, 26428, 26480, 26485, 26512, 26571, 26590, 26594, 26604, 26666, 26691, 26775, 26791, 26810, 26824, 26883, 26893, 26967, 27030, 27182, 27272, 27310, 27342, 27350, 27352, 27378, 27415, 27665, 27668, 27867, 27895, 28053, 28063, 28175, 28233, 28256, 28279, 28282, 28349, 28370, 28372, 28377, 28422, 28536, 28615, 28653, 28656, 28667, 28723, 28794, 28904, 28914, 28922, 28933, 29034, 29215, 29265, 29351, 29355, 29357, 29374, 29389, 29464, 29534, 29568, 29580, 29613, 29641, 29656, 29747, 29755, 29771, 29958, 29967, 29984, 30012, 30149, 30183, 30206, 30253, 30268, 30319, 30428, 30478, 30485, 30553, 30584, 30625, 30648, 30661, 30683, 30791, 30791, 30912, 30935, 30939, 30944, 30947, 31003, 31063, 31064, 31081, 31088, 31094, 31100, 31113, 31239, 31245, 31278, 31285, 31364, 31493, 31502, 31511, 31576, 31649, 31685, 31910, 31918, 32036, 32042, 32059, 32121, 32158, 32203, 32214, 32215, 32228, 32266, 32339, 32448, 32470, 32534, 32543, 32762, 32768};
//        ArrayList<Integer> res = (ArrayList<Integer>) Arrays.asList(1771,2102,2282,3931,4828,5364,5946,6297,6842,8749,9036,9419,10255,12123,13102,14611,16227,17933,20532,20543,22111,23882,24029,25242,27989,28211,28480,28510,31997,2498,32635);
        int m = 1399;
        int n = 669;
        List<Integer> resList = processIntersection(arr1, arr2, m, n);
        for (Integer integer : resList) {
            System.out.println(integer + " \n" +  " sie " + resList.size() /*+ "resAr leng " + res.size()*/);

        }

    }

    static List<Integer> processIntersection(int arr1[], int arr2[], int n, int m) {
        List<Integer > result = new ArrayList<>();
        int a1_index = 0 ;
        int a2_index = 0;
        int over_index = -1;


        int a1Ele, a2Ele;

        while (a1_index < arr1.length && a2_index < arr2.length) {
            a1Ele  = arr1[a1_index];
            a2Ele = arr2[a2_index];
            if(a1Ele == a2Ele) {
                result.add(a1Ele);
                a1_index++;
                a2_index++;


            }else {
                if(a2Ele < a1Ele) {
                    a2_index++;

                }else {
                    a1_index++;

                }
            }


        }
        if(result.isEmpty() ) {
            result.add(-1);
        }

        return result ;
    }



//
//    static List<Integer> processIntersection(int arr1[], int arr2[], int n, int m) {
//        // add your code here
//        int traversal = 0;
//        int i = 0;
//        Set<Integer> result = new TreeSet<Integer>();
//        ArrayList<Integer> finalList = new ArrayList<Integer>();
//        if (n < m) {
//            processArrays(n, m, arr1, arr2, finalList);
//
//        } else {
//            processArrays(m, n, arr2, arr1, finalList);
//
//
//        }
//
//
//        // while(i < traversal){
//        //     if(i < arr1.length) {
//        //         result.add(arr1[i]);
//        //     }
//        //     if(i < arr2.length) {
//        //         result.add(arr2[i]);
//        //     }
//        //      i++;
//        // }
//
//        if (finalList.size() <= 0) finalList.add(-1);
//        return finalList;
//    }
//
//    static ArrayList<Integer> processArrays(int small, int larger, int smallArr[], int largeArr[], ArrayList<Integer> finalList) {
//
//        System.out.println("smalle -> "+ small + "large -> "+ larger + " sAR -> " + smallArr + " larGrr -> " + largeArr);
//        Set<Integer> distincter = new HashSet<Integer>();
//        for (int x = 0; x < small; x++) {
//            distincter.add(smallArr[x]);
//        }
//        for (int y = 0; y < larger; y++) {
//            if (distincter.contains(largeArr[y])) {
//                finalList.add(largeArr[y]);
//            }
//        }
//        return finalList;
//    }
//




}


